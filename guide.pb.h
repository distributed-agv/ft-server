// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guide.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_guide_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_guide_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_guide_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_guide_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_guide_2eproto;
class CarState;
class CarStateDefaultTypeInternal;
extern CarStateDefaultTypeInternal _CarState_default_instance_;
class CarState_Position;
class CarState_PositionDefaultTypeInternal;
extern CarState_PositionDefaultTypeInternal _CarState_Position_default_instance_;
class Step;
class StepDefaultTypeInternal;
extern StepDefaultTypeInternal _Step_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CarState* Arena::CreateMaybeMessage<::CarState>(Arena*);
template<> ::CarState_Position* Arena::CreateMaybeMessage<::CarState_Position>(Arena*);
template<> ::Step* Arena::CreateMaybeMessage<::Step>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Step_StepCode : int {
  Step_StepCode_STOP = 0,
  Step_StepCode_LEFT = 1,
  Step_StepCode_RIGHT = 2,
  Step_StepCode_FORWARD = 3,
  Step_StepCode_BACKWARD = 4,
  Step_StepCode_Step_StepCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Step_StepCode_Step_StepCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Step_StepCode_IsValid(int value);
constexpr Step_StepCode Step_StepCode_StepCode_MIN = Step_StepCode_STOP;
constexpr Step_StepCode Step_StepCode_StepCode_MAX = Step_StepCode_BACKWARD;
constexpr int Step_StepCode_StepCode_ARRAYSIZE = Step_StepCode_StepCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Step_StepCode_descriptor();
template<typename T>
inline const std::string& Step_StepCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Step_StepCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Step_StepCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Step_StepCode_descriptor(), enum_t_value);
}
inline bool Step_StepCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Step_StepCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Step_StepCode>(
    Step_StepCode_descriptor(), name, value);
}
// ===================================================================

class CarState_Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CarState.Position) */ {
 public:
  inline CarState_Position() : CarState_Position(nullptr) {}
  virtual ~CarState_Position();

  CarState_Position(const CarState_Position& from);
  CarState_Position(CarState_Position&& from) noexcept
    : CarState_Position() {
    *this = ::std::move(from);
  }

  inline CarState_Position& operator=(const CarState_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarState_Position& operator=(CarState_Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarState_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarState_Position* internal_default_instance() {
    return reinterpret_cast<const CarState_Position*>(
               &_CarState_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CarState_Position& a, CarState_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(CarState_Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarState_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CarState_Position* New() const final {
    return CreateMaybeMessage<CarState_Position>(nullptr);
  }

  CarState_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarState_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarState_Position& from);
  void MergeFrom(const CarState_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarState_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CarState.Position";
  }
  protected:
  explicit CarState_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guide_2eproto);
    return ::descriptor_table_guide_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowIdxFieldNumber = 1,
    kColIdxFieldNumber = 2,
  };
  // int32 row_idx = 1;
  void clear_row_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 row_idx() const;
  void set_row_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row_idx() const;
  void _internal_set_row_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 col_idx = 2;
  void clear_col_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 col_idx() const;
  void set_col_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_col_idx() const;
  void _internal_set_col_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CarState.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guide_2eproto;
};
// -------------------------------------------------------------------

class CarState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CarState) */ {
 public:
  inline CarState() : CarState(nullptr) {}
  virtual ~CarState();

  CarState(const CarState& from);
  CarState(CarState&& from) noexcept
    : CarState() {
    *this = ::std::move(from);
  }

  inline CarState& operator=(const CarState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarState& operator=(CarState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarState* internal_default_instance() {
    return reinterpret_cast<const CarState*>(
               &_CarState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CarState& a, CarState& b) {
    a.Swap(&b);
  }
  inline void Swap(CarState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CarState* New() const final {
    return CreateMaybeMessage<CarState>(nullptr);
  }

  CarState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarState& from);
  void MergeFrom(const CarState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CarState";
  }
  protected:
  explicit CarState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guide_2eproto);
    return ::descriptor_table_guide_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CarState_Position Position;

  // accessors -------------------------------------------------------

  enum : int {
    kCurPosFieldNumber = 3,
    kLastPosFieldNumber = 4,
    kDstPosFieldNumber = 5,
    kCarIdFieldNumber = 1,
    kSeqFieldNumber = 2,
  };
  // .CarState.Position cur_pos = 3;
  bool has_cur_pos() const;
  private:
  bool _internal_has_cur_pos() const;
  public:
  void clear_cur_pos();
  const ::CarState_Position& cur_pos() const;
  ::CarState_Position* release_cur_pos();
  ::CarState_Position* mutable_cur_pos();
  void set_allocated_cur_pos(::CarState_Position* cur_pos);
  private:
  const ::CarState_Position& _internal_cur_pos() const;
  ::CarState_Position* _internal_mutable_cur_pos();
  public:
  void unsafe_arena_set_allocated_cur_pos(
      ::CarState_Position* cur_pos);
  ::CarState_Position* unsafe_arena_release_cur_pos();

  // .CarState.Position last_pos = 4;
  bool has_last_pos() const;
  private:
  bool _internal_has_last_pos() const;
  public:
  void clear_last_pos();
  const ::CarState_Position& last_pos() const;
  ::CarState_Position* release_last_pos();
  ::CarState_Position* mutable_last_pos();
  void set_allocated_last_pos(::CarState_Position* last_pos);
  private:
  const ::CarState_Position& _internal_last_pos() const;
  ::CarState_Position* _internal_mutable_last_pos();
  public:
  void unsafe_arena_set_allocated_last_pos(
      ::CarState_Position* last_pos);
  ::CarState_Position* unsafe_arena_release_last_pos();

  // .CarState.Position dst_pos = 5;
  bool has_dst_pos() const;
  private:
  bool _internal_has_dst_pos() const;
  public:
  void clear_dst_pos();
  const ::CarState_Position& dst_pos() const;
  ::CarState_Position* release_dst_pos();
  ::CarState_Position* mutable_dst_pos();
  void set_allocated_dst_pos(::CarState_Position* dst_pos);
  private:
  const ::CarState_Position& _internal_dst_pos() const;
  ::CarState_Position* _internal_mutable_dst_pos();
  public:
  void unsafe_arena_set_allocated_dst_pos(
      ::CarState_Position* dst_pos);
  ::CarState_Position* unsafe_arena_release_dst_pos();

  // int32 car_id = 1;
  void clear_car_id();
  ::PROTOBUF_NAMESPACE_ID::int32 car_id() const;
  void set_car_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_car_id() const;
  void _internal_set_car_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seq = 2;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CarState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CarState_Position* cur_pos_;
  ::CarState_Position* last_pos_;
  ::CarState_Position* dst_pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 car_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guide_2eproto;
};
// -------------------------------------------------------------------

class Step PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Step) */ {
 public:
  inline Step() : Step(nullptr) {}
  virtual ~Step();

  Step(const Step& from);
  Step(Step&& from) noexcept
    : Step() {
    *this = ::std::move(from);
  }

  inline Step& operator=(const Step& from) {
    CopyFrom(from);
    return *this;
  }
  inline Step& operator=(Step&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Step& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Step* internal_default_instance() {
    return reinterpret_cast<const Step*>(
               &_Step_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Step& a, Step& b) {
    a.Swap(&b);
  }
  inline void Swap(Step* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Step* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Step* New() const final {
    return CreateMaybeMessage<Step>(nullptr);
  }

  Step* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Step>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Step& from);
  void MergeFrom(const Step& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Step* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Step";
  }
  protected:
  explicit Step(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guide_2eproto);
    return ::descriptor_table_guide_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Step_StepCode StepCode;
  static constexpr StepCode STOP =
    Step_StepCode_STOP;
  static constexpr StepCode LEFT =
    Step_StepCode_LEFT;
  static constexpr StepCode RIGHT =
    Step_StepCode_RIGHT;
  static constexpr StepCode FORWARD =
    Step_StepCode_FORWARD;
  static constexpr StepCode BACKWARD =
    Step_StepCode_BACKWARD;
  static inline bool StepCode_IsValid(int value) {
    return Step_StepCode_IsValid(value);
  }
  static constexpr StepCode StepCode_MIN =
    Step_StepCode_StepCode_MIN;
  static constexpr StepCode StepCode_MAX =
    Step_StepCode_StepCode_MAX;
  static constexpr int StepCode_ARRAYSIZE =
    Step_StepCode_StepCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StepCode_descriptor() {
    return Step_StepCode_descriptor();
  }
  template<typename T>
  static inline const std::string& StepCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StepCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StepCode_Name.");
    return Step_StepCode_Name(enum_t_value);
  }
  static inline bool StepCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StepCode* value) {
    return Step_StepCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStepCodeFieldNumber = 1,
  };
  // .Step.StepCode step_code = 1;
  void clear_step_code();
  ::Step_StepCode step_code() const;
  void set_step_code(::Step_StepCode value);
  private:
  ::Step_StepCode _internal_step_code() const;
  void _internal_set_step_code(::Step_StepCode value);
  public:

  // @@protoc_insertion_point(class_scope:Step)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int step_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guide_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CarState_Position

// int32 row_idx = 1;
inline void CarState_Position::clear_row_idx() {
  row_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarState_Position::_internal_row_idx() const {
  return row_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarState_Position::row_idx() const {
  // @@protoc_insertion_point(field_get:CarState.Position.row_idx)
  return _internal_row_idx();
}
inline void CarState_Position::_internal_set_row_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_idx_ = value;
}
inline void CarState_Position::set_row_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row_idx(value);
  // @@protoc_insertion_point(field_set:CarState.Position.row_idx)
}

// int32 col_idx = 2;
inline void CarState_Position::clear_col_idx() {
  col_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarState_Position::_internal_col_idx() const {
  return col_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarState_Position::col_idx() const {
  // @@protoc_insertion_point(field_get:CarState.Position.col_idx)
  return _internal_col_idx();
}
inline void CarState_Position::_internal_set_col_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_idx_ = value;
}
inline void CarState_Position::set_col_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_col_idx(value);
  // @@protoc_insertion_point(field_set:CarState.Position.col_idx)
}

// -------------------------------------------------------------------

// CarState

// int32 car_id = 1;
inline void CarState::clear_car_id() {
  car_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarState::_internal_car_id() const {
  return car_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarState::car_id() const {
  // @@protoc_insertion_point(field_get:CarState.car_id)
  return _internal_car_id();
}
inline void CarState::_internal_set_car_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  car_id_ = value;
}
inline void CarState::set_car_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_car_id(value);
  // @@protoc_insertion_point(field_set:CarState.car_id)
}

// int32 seq = 2;
inline void CarState::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarState::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarState::seq() const {
  // @@protoc_insertion_point(field_get:CarState.seq)
  return _internal_seq();
}
inline void CarState::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void CarState::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:CarState.seq)
}

// .CarState.Position cur_pos = 3;
inline bool CarState::_internal_has_cur_pos() const {
  return this != internal_default_instance() && cur_pos_ != nullptr;
}
inline bool CarState::has_cur_pos() const {
  return _internal_has_cur_pos();
}
inline void CarState::clear_cur_pos() {
  if (GetArena() == nullptr && cur_pos_ != nullptr) {
    delete cur_pos_;
  }
  cur_pos_ = nullptr;
}
inline const ::CarState_Position& CarState::_internal_cur_pos() const {
  const ::CarState_Position* p = cur_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CarState_Position*>(
      &::_CarState_Position_default_instance_);
}
inline const ::CarState_Position& CarState::cur_pos() const {
  // @@protoc_insertion_point(field_get:CarState.cur_pos)
  return _internal_cur_pos();
}
inline void CarState::unsafe_arena_set_allocated_cur_pos(
    ::CarState_Position* cur_pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_pos_);
  }
  cur_pos_ = cur_pos;
  if (cur_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CarState.cur_pos)
}
inline ::CarState_Position* CarState::release_cur_pos() {
  
  ::CarState_Position* temp = cur_pos_;
  cur_pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CarState_Position* CarState::unsafe_arena_release_cur_pos() {
  // @@protoc_insertion_point(field_release:CarState.cur_pos)
  
  ::CarState_Position* temp = cur_pos_;
  cur_pos_ = nullptr;
  return temp;
}
inline ::CarState_Position* CarState::_internal_mutable_cur_pos() {
  
  if (cur_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::CarState_Position>(GetArena());
    cur_pos_ = p;
  }
  return cur_pos_;
}
inline ::CarState_Position* CarState::mutable_cur_pos() {
  // @@protoc_insertion_point(field_mutable:CarState.cur_pos)
  return _internal_mutable_cur_pos();
}
inline void CarState::set_allocated_cur_pos(::CarState_Position* cur_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cur_pos_;
  }
  if (cur_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cur_pos);
    if (message_arena != submessage_arena) {
      cur_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_pos, submessage_arena);
    }
    
  } else {
    
  }
  cur_pos_ = cur_pos;
  // @@protoc_insertion_point(field_set_allocated:CarState.cur_pos)
}

// .CarState.Position last_pos = 4;
inline bool CarState::_internal_has_last_pos() const {
  return this != internal_default_instance() && last_pos_ != nullptr;
}
inline bool CarState::has_last_pos() const {
  return _internal_has_last_pos();
}
inline void CarState::clear_last_pos() {
  if (GetArena() == nullptr && last_pos_ != nullptr) {
    delete last_pos_;
  }
  last_pos_ = nullptr;
}
inline const ::CarState_Position& CarState::_internal_last_pos() const {
  const ::CarState_Position* p = last_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CarState_Position*>(
      &::_CarState_Position_default_instance_);
}
inline const ::CarState_Position& CarState::last_pos() const {
  // @@protoc_insertion_point(field_get:CarState.last_pos)
  return _internal_last_pos();
}
inline void CarState::unsafe_arena_set_allocated_last_pos(
    ::CarState_Position* last_pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_pos_);
  }
  last_pos_ = last_pos;
  if (last_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CarState.last_pos)
}
inline ::CarState_Position* CarState::release_last_pos() {
  
  ::CarState_Position* temp = last_pos_;
  last_pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CarState_Position* CarState::unsafe_arena_release_last_pos() {
  // @@protoc_insertion_point(field_release:CarState.last_pos)
  
  ::CarState_Position* temp = last_pos_;
  last_pos_ = nullptr;
  return temp;
}
inline ::CarState_Position* CarState::_internal_mutable_last_pos() {
  
  if (last_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::CarState_Position>(GetArena());
    last_pos_ = p;
  }
  return last_pos_;
}
inline ::CarState_Position* CarState::mutable_last_pos() {
  // @@protoc_insertion_point(field_mutable:CarState.last_pos)
  return _internal_mutable_last_pos();
}
inline void CarState::set_allocated_last_pos(::CarState_Position* last_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete last_pos_;
  }
  if (last_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(last_pos);
    if (message_arena != submessage_arena) {
      last_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_pos, submessage_arena);
    }
    
  } else {
    
  }
  last_pos_ = last_pos;
  // @@protoc_insertion_point(field_set_allocated:CarState.last_pos)
}

// .CarState.Position dst_pos = 5;
inline bool CarState::_internal_has_dst_pos() const {
  return this != internal_default_instance() && dst_pos_ != nullptr;
}
inline bool CarState::has_dst_pos() const {
  return _internal_has_dst_pos();
}
inline void CarState::clear_dst_pos() {
  if (GetArena() == nullptr && dst_pos_ != nullptr) {
    delete dst_pos_;
  }
  dst_pos_ = nullptr;
}
inline const ::CarState_Position& CarState::_internal_dst_pos() const {
  const ::CarState_Position* p = dst_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CarState_Position*>(
      &::_CarState_Position_default_instance_);
}
inline const ::CarState_Position& CarState::dst_pos() const {
  // @@protoc_insertion_point(field_get:CarState.dst_pos)
  return _internal_dst_pos();
}
inline void CarState::unsafe_arena_set_allocated_dst_pos(
    ::CarState_Position* dst_pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_pos_);
  }
  dst_pos_ = dst_pos;
  if (dst_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CarState.dst_pos)
}
inline ::CarState_Position* CarState::release_dst_pos() {
  
  ::CarState_Position* temp = dst_pos_;
  dst_pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CarState_Position* CarState::unsafe_arena_release_dst_pos() {
  // @@protoc_insertion_point(field_release:CarState.dst_pos)
  
  ::CarState_Position* temp = dst_pos_;
  dst_pos_ = nullptr;
  return temp;
}
inline ::CarState_Position* CarState::_internal_mutable_dst_pos() {
  
  if (dst_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::CarState_Position>(GetArena());
    dst_pos_ = p;
  }
  return dst_pos_;
}
inline ::CarState_Position* CarState::mutable_dst_pos() {
  // @@protoc_insertion_point(field_mutable:CarState.dst_pos)
  return _internal_mutable_dst_pos();
}
inline void CarState::set_allocated_dst_pos(::CarState_Position* dst_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dst_pos_;
  }
  if (dst_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dst_pos);
    if (message_arena != submessage_arena) {
      dst_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_pos, submessage_arena);
    }
    
  } else {
    
  }
  dst_pos_ = dst_pos;
  // @@protoc_insertion_point(field_set_allocated:CarState.dst_pos)
}

// -------------------------------------------------------------------

// Step

// .Step.StepCode step_code = 1;
inline void Step::clear_step_code() {
  step_code_ = 0;
}
inline ::Step_StepCode Step::_internal_step_code() const {
  return static_cast< ::Step_StepCode >(step_code_);
}
inline ::Step_StepCode Step::step_code() const {
  // @@protoc_insertion_point(field_get:Step.step_code)
  return _internal_step_code();
}
inline void Step::_internal_set_step_code(::Step_StepCode value) {
  
  step_code_ = value;
}
inline void Step::set_step_code(::Step_StepCode value) {
  _internal_set_step_code(value);
  // @@protoc_insertion_point(field_set:Step.step_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Step_StepCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Step_StepCode>() {
  return ::Step_StepCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_guide_2eproto
